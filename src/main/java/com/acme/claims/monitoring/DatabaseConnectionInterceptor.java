package com.acme.claims.monitoring;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.Statement;

/**
 * Interceptor to monitor database connections and queries
 * This helps track connection usage and query patterns
 */
@Component
@RequiredArgsConstructor
@Slf4j
public class DatabaseConnectionInterceptor {
    
    private final DatabaseMonitoringService monitoringService;
    
    /**
     * Wrap a connection to monitor its usage
     */
    public Connection wrapConnection(Connection connection) {
        return new MonitoredConnection(connection, monitoringService);
    }
    
    /**
     * Wrapper class for Connection to monitor database operations
     */
    private static class MonitoredConnection implements Connection {
        private final Connection delegate;
        private final DatabaseMonitoringService monitoringService;
        
        public MonitoredConnection(Connection delegate, DatabaseMonitoringService monitoringService) {
            this.delegate = delegate;
            this.monitoringService = monitoringService;
        }
        
        @Override
        public Statement createStatement() throws java.sql.SQLException {
            monitoringService.incrementQueryCount();
            return delegate.createStatement();
        }
        
        @Override
        public PreparedStatement prepareStatement(String sql) throws java.sql.SQLException {
            monitoringService.incrementQueryCount();
            return delegate.prepareStatement(sql);
        }
        
        @Override
        public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws java.sql.SQLException {
            monitoringService.incrementQueryCount();
            return delegate.prepareStatement(sql, resultSetType, resultSetConcurrency);
        }
        
        @Override
        public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws java.sql.SQLException {
            monitoringService.incrementQueryCount();
            return delegate.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
        }
        
        @Override
        public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws java.sql.SQLException {
            monitoringService.incrementQueryCount();
            return delegate.prepareStatement(sql, autoGeneratedKeys);
        }
        
        @Override
        public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws java.sql.SQLException {
            monitoringService.incrementQueryCount();
            return delegate.prepareStatement(sql, columnIndexes);
        }
        
        @Override
        public PreparedStatement prepareStatement(String sql, String[] columnNames) throws java.sql.SQLException {
            monitoringService.incrementQueryCount();
            return delegate.prepareStatement(sql, columnNames);
        }
        
        // Delegate all other methods to the original connection
        @Override
        public void close() throws java.sql.SQLException {
            delegate.close();
        }
        
        @Override
        public boolean isClosed() throws java.sql.SQLException {
            return delegate.isClosed();
        }
        
        @Override
        public java.sql.DatabaseMetaData getMetaData() throws java.sql.SQLException {
            return delegate.getMetaData();
        }
        
        @Override
        public void setReadOnly(boolean readOnly) throws java.sql.SQLException {
            delegate.setReadOnly(readOnly);
        }
        
        @Override
        public boolean isReadOnly() throws java.sql.SQLException {
            return delegate.isReadOnly();
        }
        
        @Override
        public void setCatalog(String catalog) throws java.sql.SQLException {
            delegate.setCatalog(catalog);
        }
        
        @Override
        public String getCatalog() throws java.sql.SQLException {
            return delegate.getCatalog();
        }
        
        @Override
        public void setTransactionIsolation(int level) throws java.sql.SQLException {
            delegate.setTransactionIsolation(level);
        }
        
        @Override
        public int getTransactionIsolation() throws java.sql.SQLException {
            return delegate.getTransactionIsolation();
        }
        
        @Override
        public java.sql.SQLWarning getWarnings() throws java.sql.SQLException {
            return delegate.getWarnings();
        }
        
        @Override
        public void clearWarnings() throws java.sql.SQLException {
            delegate.clearWarnings();
        }
        
        @Override
        public java.sql.Statement createStatement(int resultSetType, int resultSetConcurrency) throws java.sql.SQLException {
            monitoringService.incrementQueryCount();
            return delegate.createStatement(resultSetType, resultSetConcurrency);
        }
        
        @Override
        public java.sql.Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws java.sql.SQLException {
            monitoringService.incrementQueryCount();
            return delegate.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
        }
        
        @Override
        public java.sql.CallableStatement prepareCall(String sql) throws java.sql.SQLException {
            monitoringService.incrementQueryCount();
            return delegate.prepareCall(sql);
        }
        
        @Override
        public java.sql.CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws java.sql.SQLException {
            monitoringService.incrementQueryCount();
            return delegate.prepareCall(sql, resultSetType, resultSetConcurrency);
        }
        
        @Override
        public java.sql.CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws java.sql.SQLException {
            monitoringService.incrementQueryCount();
            return delegate.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
        }
        
        @Override
        public String nativeSQL(String sql) throws java.sql.SQLException {
            return delegate.nativeSQL(sql);
        }
        
        @Override
        public void setAutoCommit(boolean autoCommit) throws java.sql.SQLException {
            delegate.setAutoCommit(autoCommit);
        }
        
        @Override
        public boolean getAutoCommit() throws java.sql.SQLException {
            return delegate.getAutoCommit();
        }
        
        @Override
        public void commit() throws java.sql.SQLException {
            delegate.commit();
        }
        
        @Override
        public void rollback() throws java.sql.SQLException {
            delegate.rollback();
        }
        
        @Override
        public void rollback(java.sql.Savepoint savepoint) throws java.sql.SQLException {
            delegate.rollback(savepoint);
        }
        
        @Override
        public java.sql.Savepoint setSavepoint() throws java.sql.SQLException {
            return delegate.setSavepoint();
        }
        
        @Override
        public java.sql.Savepoint setSavepoint(String name) throws java.sql.SQLException {
            return delegate.setSavepoint(name);
        }
        
        @Override
        public void releaseSavepoint(java.sql.Savepoint savepoint) throws java.sql.SQLException {
            delegate.releaseSavepoint(savepoint);
        }
        
        @Override
        public java.sql.Clob createClob() throws java.sql.SQLException {
            return delegate.createClob();
        }
        
        @Override
        public java.sql.Blob createBlob() throws java.sql.SQLException {
            return delegate.createBlob();
        }
        
        @Override
        public java.sql.NClob createNClob() throws java.sql.SQLException {
            return delegate.createNClob();
        }
        
        @Override
        public java.sql.SQLXML createSQLXML() throws java.sql.SQLException {
            return delegate.createSQLXML();
        }
        
        @Override
        public boolean isValid(int timeout) throws java.sql.SQLException {
            return delegate.isValid(timeout);
        }
        
        @Override
        public void setClientInfo(String name, String value) throws java.sql.SQLClientInfoException {
            delegate.setClientInfo(name, value);
        }
        
        @Override
        public void setClientInfo(java.util.Properties properties) throws java.sql.SQLClientInfoException {
            delegate.setClientInfo(properties);
        }
        
        @Override
        public String getClientInfo(String name) throws java.sql.SQLException {
            return delegate.getClientInfo(name);
        }
        
        @Override
        public java.util.Properties getClientInfo() throws java.sql.SQLException {
            return delegate.getClientInfo();
        }
        
        @Override
        public java.sql.Array createArrayOf(String typeName, Object[] elements) throws java.sql.SQLException {
            return delegate.createArrayOf(typeName, elements);
        }
        
        @Override
        public java.sql.Struct createStruct(String typeName, Object[] attributes) throws java.sql.SQLException {
            return delegate.createStruct(typeName, attributes);
        }
        
        @Override
        public void setSchema(String schema) throws java.sql.SQLException {
            delegate.setSchema(schema);
        }
        
        @Override
        public String getSchema() throws java.sql.SQLException {
            return delegate.getSchema();
        }
        
        @Override
        public void abort(java.util.concurrent.Executor executor) throws java.sql.SQLException {
            delegate.abort(executor);
        }
        
        @Override
        public void setNetworkTimeout(java.util.concurrent.Executor executor, int milliseconds) throws java.sql.SQLException {
            delegate.setNetworkTimeout(executor, milliseconds);
        }
        
        @Override
        public int getNetworkTimeout() throws java.sql.SQLException {
            return delegate.getNetworkTimeout();
        }
        
        @Override
        public int getHoldability() throws java.sql.SQLException {
            return delegate.getHoldability();
        }
        
        @Override
        public void setHoldability(int holdability) throws java.sql.SQLException {
            delegate.setHoldability(holdability);
        }
        
        @Override
        public void setTypeMap(java.util.Map<String, Class<?>> map) throws java.sql.SQLException {
            delegate.setTypeMap(map);
        }
        
        @Override
        public java.util.Map<String, Class<?>> getTypeMap() throws java.sql.SQLException {
            return delegate.getTypeMap();
        }
        
        @Override
        public <T> T unwrap(Class<T> iface) throws java.sql.SQLException {
            return delegate.unwrap(iface);
        }
        
        @Override
        public boolean isWrapperFor(Class<?> iface) throws java.sql.SQLException {
            return delegate.isWrapperFor(iface);
        }
    }
}

{
    "filename": "Xml fileds mapping.xlsx",
    "sheets": [
        {
            "id": "0",
            "name": "Sheet1",
            "headers": [
                "Report Column",
                "Submission XML path",
                "Remittance XML path",
                "Notes / derivation",
                "Cursor Analysis",
                "Submission DB Path",
                "Remittance DB Path",
                "Data Type",
                "Best Path",
                "AI Analysis"
            ],
            "rows": [
                {
                    "Report Column": "ActivityID",
                    "Submission XML path": "Claim/Activity/ID",
                    "Remittance XML path": "Claim/Activity/ID",
                    "Notes / derivation": "Direct element: activity/line identifier. Type: ActivityID (xs:string, minLength: 1, maxLength: 30). Unique per activity within a claim.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.activity.activity_id",
                    "Remittance DB Path": "claims.remittance_activity.activity_id",
                    "Data Type": "text",
                    "Best Path": "Use claims.activity.activity_id for submission; claims.remittance_activity.activity_id for remittance. Schema confirms type as xs:string.",
                    "AI Analysis": "Unique identifier for each activity within a claim, echoed in remittance for linking. Schema confirms uniqueness within claim scope."
                },
                {
                    "Report Column": "ActivityStartDate / ActivityDate / ActivityStartDat",
                    "Submission XML path": "Claim/Activity/Start",
                    "Remittance XML path": "Claim/Activity/Start",
                    "Notes / derivation": "Start timestamp of service/activity. Type: ActivityStart (DateTimeForm: xs:string, format: dd/mm/yyyy HH:MM, >= 01/06/2012, <= 18/09/2025, default time 00:00 if unknown).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.activity.start_at",
                    "Remittance DB Path": "claims.remittance_activity.start_at",
                    "Data Type": "timestamptz",
                    "Best Path": "claims.activity.start_at for submission; claims.remittance_activity.start_at for remittance, per schema's ActivityStart.",
                    "AI Analysis": "Represents the start of the activity; consistent across submission and remittance. Schema enforces DateTimeForm for consistency."
                },
                {
                    "Report Column": "ActivityStartDat (alt label)",
                    "Submission XML path": "Claim/Activity/Start",
                    "Remittance XML path": "Claim/Activity/Start",
                    "Notes / derivation": "Alternate label for ActivityStartDate. Type: ActivityStart (DateTimeForm: xs:string, format: dd/mm/yyyy HH:MM, >= 01/06/2012, <= 18/09/2025).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.activity.start_at",
                    "Remittance DB Path": "claims.remittance_activity.start_at",
                    "Data Type": "timestamptz",
                    "Best Path": "Same as ActivityStartDate: claims.activity.start_at or claims.remittance_activity.start_at, per schema's ActivityStart.",
                    "AI Analysis": "Duplicate label for Activity/Start; no additional processing needed. Schema confirms same type and restrictions."
                },
                {
                    "Report Column": "Ageing Days",
                    "Submission XML path": "Derived (not in XML)",
                    "Remittance XML path": "Derived (not in XML)",
                    "Notes / derivation": "Computed as current date (18/09/2025) minus ClaimDateSettlement or EncounterStart. ClaimDateSettlement: DateTimeForm (xs:string, dd/mm/yyyy HH:MM, > TransactionDate); EncounterStart: DateTimeForm. Prefer settlement date for accuracy.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Derived: current_date - claims.encounter.start_at",
                    "Remittance DB Path": "Derived: current_date - claims.remittance_claim.date_settlement",
                    "Data Type": "integer",
                    "Best Path": "Prefer current_date - claims.remittance_claim.date_settlement; else current_date - claims.encounter.start_at, per schema's DateTimeForm.",
                    "AI Analysis": "Dynamic calculation; uses ClaimDateSettlement for remittance or EncounterStart as fallback. Schema enforces date restrictions."
                },
                {
                    "Report Column": "AllSubmissionFiles",
                    "Submission XML path": "Not in claim XML (system metadata)",
                    "Remittance XML path": "Not in RA (system metadata)",
                    "Notes / derivation": "Requires submission/file exchange logs. Not part of ClaimSubmission or RemittanceAdvice schemas; HeaderSenderID, HeaderReceiverID (xs:string, minLength: 1) may assist in metadata lookup.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Derived from claims.ingestion_file.file_id where root_type = 1",
                    "Remittance DB Path": "Derived from claims.ingestion_file.file_id where root_type = 2",
                    "Data Type": "array of text",
                    "Best Path": "claims.ingestion_file.file_id with root_type=1 for submission, root_type=2 for remittance, as schemas exclude file metadata.",
                    "AI Analysis": "External system metadata required; schemas do not include file-level metadata."
                },
                {
                    "Report Column": "Appeal Status",
                    "Submission XML path": "Not present",
                    "Remittance XML path": "Not present",
                    "Notes / derivation": "Not supported in provided ClaimSubmission or RemittanceAdvice schemas. Track via external claim management system.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Not stored",
                    "Remittance DB Path": "Not stored",
                    "Data Type": "text",
                    "Best Path": "Not stored; derive from external claim management system, as schemas lack appeal status.",
                    "AI Analysis": "Requires external system; no schema support for appeal status."
                },
                {
                    "Report Column": "Billed Amount / ClaimAmt / Claim Amount",
                    "Submission XML path": "Claim/Activity/Net (sum of activities)",
                    "Remittance XML path": "Claim/Activity/Net (per activity)",
                    "Notes / derivation": "Sum of Activity/Net across activities for claim total. Type: ActivityNet (xs:float, currency: AED, >= 0).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "sum(claims.activity.net) over (partition by claim_id)",
                    "Remittance DB Path": "sum(claims.remittance_activity.net) over (partition by remittance_claim_id)",
                    "Data Type": "numeric(14,2)",
                    "Best Path": "sum(claims.activity.net) for submission; sum(claims.remittance_activity.net) for remittance, per schema's ActivityNet.",
                    "AI Analysis": "Represents total billed amount; echoed in remittance. Schema confirms xs:float for ActivityNet."
                },
                {
                    "Report Column": "ClaimActivityNumber",
                    "Submission XML path": "Claim/Activity/ID",
                    "Remittance XML path": "Claim/Activity/ID",
                    "Notes / derivation": "Direct mapping to activity identifier. Type: ActivityID (xs:string, minLength: 1, maxLength: 30).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.activity.activity_id",
                    "Remittance DB Path": "claims.remittance_activity.activity_id",
                    "Data Type": "text",
                    "Best Path": "claims.activity.activity_id or claims.remittance_activity.activity_id, per schema's ActivityID.",
                    "AI Analysis": "Unique identifier for activity; consistent across schemas. Schema enforces string constraints."
                },
                {
                    "Report Column": "ClaimNumber / ClaimNumber (ID)",
                    "Submission XML path": "Claim/ID",
                    "Remittance XML path": "Claim/ID",
                    "Notes / derivation": "Provider's unique claim identifier. Type: ClaimID (xs:string, minLength: 1).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.claim_key.claim_id",
                    "Remittance DB Path": "claims.claim_key.claim_id",
                    "Data Type": "text",
                    "Best Path": "claims.claim_key.claim_id for both, per schema's ClaimID.",
                    "AI Analysis": "Critical for linking submission to remittance. Schema ensures uniqueness."
                },
                {
                    "Report Column": "Claim Month / ClaimMonthName",
                    "Submission XML path": "Derived from Claim/Header/TransactionDate",
                    "Remittance XML path": "Derived from Claim/Header/TransactionDate",
                    "Notes / derivation": "Extract month name from transaction date. Type: HeaderTransactionDate (DateTimeForm: xs:string, dd/mm/yyyy HH:MM, <= 18/09/2025).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "to_char(claims.claim.tx_at, 'Month')",
                    "Remittance DB Path": "to_char(claims.remittance.tx_at, 'Month')",
                    "Data Type": "text",
                    "Best Path": "to_char(claims.claim.tx_at, 'Month') for submission; to_char(claims.remittance.tx_at, 'Month') for remittance, per schema's HeaderTransactionDate.",
                    "AI Analysis": "Derived from transaction date; consistent across schemas. Schema enforces DateTimeForm."
                },
                {
                    "Report Column": "Claim Net Amount / Remitted Net Amount",
                    "Submission XML path": "Claim/Activity/Net (submission)",
                    "Remittance XML path": "Claim/Activity/PaymentAmount (RA)",
                    "Notes / derivation": "Submission: sum of Activity/Net; Remittance: sum of Activity/PaymentAmount. Types: ActivityNet, ActivityPaymentAmount (xs:float, currency: AED).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.claim.net",
                    "Remittance DB Path": "sum(claims.remittance_activity.payment_amount) over (partition by remittance_claim_id)",
                    "Data Type": "numeric(14,2)",
                    "Best Path": "claims.claim.net for submission; sum(claims.remittance_activity.payment_amount) for remittance, per schema's ActivityNet and ActivityPaymentAmount.",
                    "AI Analysis": "Submission reflects billed net; remittance reflects paid amount. Schema confirms xs:float for both."
                },
                {
                    "Report Column": "Claim Status",
                    "Submission XML path": "Not explicit in sample submission",
                    "Remittance XML path": "Not explicit in sample RA",
                    "Notes / derivation": "Infer from Activity/PaymentAmount vs Activity/Net or presence of ActivityDenialCode. Types: ActivityPaymentAmount (xs:float), ActivityDenialCode (xs:string). No direct ClaimStatus type in schemas.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.claim_status_timeline.status",
                    "Remittance DB Path": "claims.claim_status_timeline.status",
                    "Data Type": "smallint",
                    "Best Path": "claims.claim_status_timeline.status, inferred from schema's ActivityPaymentAmount and ActivityDenialCode.",
                    "AI Analysis": "Derived from payment and denial data; not explicitly in schemas. E.g., PaymentAmount=Net: paid; PaymentAmount<Net: partial/denied."
                },
                {
                    "Report Column": "Claim Submission Date",
                    "Submission XML path": "Submission file metadata or Claim/Header/TransactionDate",
                    "Remittance XML path": "RA: Header/TransactionDate is RA generation date",
                    "Notes / derivation": "Submission date from file metadata or Header/TransactionDate. Type: HeaderTransactionDate (DateTimeForm: xs:string, dd/mm/yyyy HH:MM, <= 18/09/2025).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.submission.tx_at",
                    "Remittance DB Path": "claims.remittance.tx_at",
                    "Data Type": "timestamptz",
                    "Best Path": "claims.submission.tx_at for submission; claims.remittance.tx_at for RA, per schema's HeaderTransactionDate.",
                    "AI Analysis": "Submission date from metadata or transaction date; RA date is generation. Schema enforces date format."
                },
                {
                    "Report Column": "Claim Year",
                    "Submission XML path": "Derived from Claim/Header/TransactionDate",
                    "Remittance XML path": "Derived from RA header/TransactionDate",
                    "Notes / derivation": "Extract year from transaction date. Type: HeaderTransactionDate (DateTimeForm: xs:string, dd/mm/yyyy HH:MM).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "extract(year from claims.claim.tx_at)",
                    "Remittance DB Path": "extract(year from claims.remittance.tx_at)",
                    "Data Type": "integer",
                    "Best Path": "extract(year from claims.claim.tx_at) for submission; extract(year from claims.remittance.tx_at) for remittance, per schema's HeaderTransactionDate.",
                    "AI Analysis": "Derived from transaction date; consistent across schemas."
                },
                {
                    "Report Column": "Clinician (ID) / Clinician",
                    "Submission XML path": "Claim/Activity/Clinician",
                    "Remittance XML path": "Claim/Activity/Clinician",
                    "Notes / derivation": "Activity-level clinician ID. Type: ActivityClinician (xs:string, minLength: 1, no spaces).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.activity.clinician",
                    "Remittance DB Path": "claims.remittance_activity.clinician",
                    "Data Type": "text",
                    "Best Path": "claims.activity.clinician or claims.remittance_activity.clinician, per schema's ActivityClinician.",
                    "AI Analysis": "Identifies treating clinician; consistent across schemas. Schema enforces string constraints."
                },
                {
                    "Report Column": "Clinician Name / Clinician_Name",
                    "Submission XML path": "Not in XML (IDs only)",
                    "Remittance XML path": "Not in XML",
                    "Notes / derivation": "Resolve clinician ID to name via master data lookup. No schema type for name; ActivityClinician (xs:string) provides ID.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims_ref.clinician.name",
                    "Remittance DB Path": "claims_ref.clinician.name",
                    "Data Type": "text",
                    "Best Path": "claims_ref.clinician.name joined on clinician_code = activity.clinician, as schemas lack name field.",
                    "AI Analysis": "Requires external lookup table; schemas only provide clinician ID."
                },
                {
                    "Report Column": "Collection Rate",
                    "Submission XML path": "Derived",
                    "Remittance XML path": "Derived",
                    "Notes / derivation": "TotalRemitted / TotalBilled (sum of Activity/PaymentAmount / sum of Activity/Net). Types: ActivityPaymentAmount, ActivityNet (xs:float, currency: AED).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Derived: sum(claims.remittance_activity.payment_amount) / sum(claims.activity.net)",
                    "Remittance DB Path": "Derived: sum(claims.remittance_activity.payment_amount) / sum(claims.remittance_activity.net)",
                    "Data Type": "numeric",
                    "Best Path": "sum(claims.remittance_activity.payment_amount) / sum(claims.activity.net) joining on claim_key_id, per schema's ActivityPaymentAmount and ActivityNet.",
                    "AI Analysis": "Computed metric comparing paid vs. billed amounts. Schema confirms float types for calculations."
                },
                {
                    "Report Column": "Correction Taken Back Amount",
                    "Submission XML path": "Not in these XMLs",
                    "Remittance XML path": "Not in these XMLs",
                    "Notes / derivation": "Requires sample XML for take-back adjustments. Not supported in provided ClaimSubmission or RemittanceAdvice schemas.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Not stored",
                    "Remittance DB Path": "Not stored",
                    "Data Type": "numeric(14,2)",
                    "Best Path": "Not stored; await sample XML for take-back, as schemas lack this field.",
                    "AI Analysis": "Pending sample XML; not supported in current schemas. Likely tracked externally."
                },
                {
                    "Report Column": "Correction Taken Back Count",
                    "Submission XML path": "Not in XMLs",
                    "Remittance XML path": "Not in XMLs",
                    "Notes / derivation": "Requires sample XML for take-back adjustments. Not supported in provided schemas.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Not stored",
                    "Remittance DB Path": "Not stored",
                    "Data Type": "integer",
                    "Best Path": "Not stored; pending sample XML, as schemas lack this field.",
                    "AI Analysis": "Pending sample XML; not in schemas. Likely tracked externally."
                },
                {
                    "Report Column": "CPT Category / CPTCategory",
                    "Submission XML path": "Claim/Activity/Type",
                    "Remittance XML path": "Claim/Activity/Type",
                    "Notes / derivation": "Maps to activity type, primarily CPT. Type: ActivityType (xs:integer, enumeration: [3=CPT, 4=HCPCS, 5=Drug, 6=Dental, 8=Service Code, 9=DRG, 10=Scientific Code]).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.activity.type",
                    "Remittance DB Path": "claims.remittance_activity.type",
                    "Data Type": "text",
                    "Best Path": "claims.activity.type or claims.remittance_activity.type, per schema's ActivityType.",
                    "AI Analysis": "Identifies coding standard (e.g., CPT=3); consistent across schemas. Schema provides enumerated values."
                },
                {
                    "Report Column": "CPT Code / CPTCode / Code",
                    "Submission XML path": "Claim/Activity/Code",
                    "Remittance XML path": "Claim/Activity/Code",
                    "Notes / derivation": "Procedure or service code. Type: ActivityCode (xs:string, minLength: 1, no spaces). Validated against eClaimLink coding sets.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.activity.code",
                    "Remittance DB Path": "claims.remittance_activity.code",
                    "Data Type": "text",
                    "Best Path": "claims.activity.code or claims.remittance_activity.code, per schema's ActivityCode.",
                    "AI Analysis": "Direct mapping to procedure code; consistent across schemas. Schema enforces string constraints."
                },
                {
                    "Report Column": "CPT Status",
                    "Submission XML path": "Not explicit",
                    "Remittance XML path": "Not explicit",
                    "Notes / derivation": "Derived: if Activity/DenialCode present or PaymentAmount < Net, status = denied/part-paid. Types: ActivityDenialCode (xs:string, minLength: 1), ActivityPaymentAmount (xs:float).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Derived from claims.activity and claims.remittance_activity",
                    "Remittance DB Path": "Derived: case when claims.remittance_activity.denial_code is not null or payment_amount < net then 'denied/part-paid' else 'paid'",
                    "Data Type": "text",
                    "Best Path": "case when claims.remittance_activity.denial_code is not null or payment_amount < net then 'denied/part-paid' else 'paid', per schema's ActivityDenialCode and ActivityPaymentAmount.",
                    "AI Analysis": "Inferred from remittance data; not a direct schema field. Schema supports denial and payment data for derivation."
                },
                {
                    "Report Column": "CPT Type / CPTType",
                    "Submission XML path": "Claim/Activity/Type",
                    "Remittance XML path": "Claim/Activity/Type",
                    "Notes / derivation": "Same as CPTCategory. Type: ActivityType (xs:integer, enumeration: [3=CPT, 4=HCPCS, 5=Drug, 6=Dental, 8=Service Code, 9=DRG, 10=Scientific Code]).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.activity.type",
                    "Remittance DB Path": "claims.remittance_activity.type",
                    "Data Type": "text",
                    "Best Path": "claims.activity.type or claims.remittance_activity.type, per schema's ActivityType.",
                    "AI Analysis": "Duplicate of CPTCategory; maps to activity type. Schema provides enumerated values."
                },
                {
                    "Report Column": "CTClinician",
                    "Submission XML path": "Not present",
                    "Remittance XML path": "Not present",
                    "Notes / derivation": "Not supported in provided ClaimSubmission or RemittanceAdvice schemas. Likely a typo or external field.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Not stored",
                    "Remittance DB Path": "Not stored",
                    "Data Type": "text",
                    "Best Path": "Not stored; no schema support for CTClinician. Possible fallback to claims.activity.clinician.",
                    "AI Analysis": "No schema support; possibly a mislabeling of ActivityClinician. Schema only provides ActivityClinician (xs:string)."
                },
                {
                    "Report Column": "Date of Service / Service Date / StartDate / ActivityDate",
                    "Submission XML path": "Claim/Activity/Start",
                    "Remittance XML path": "Claim/Activity/Start",
                    "Notes / derivation": "Direct mapping to activity start date. Type: ActivityStart (DateTimeForm: xs:string, dd/mm/yyyy HH:MM, >= 01/06/2012, <= 18/09/2025).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.activity.start_at",
                    "Remittance DB Path": "claims.remittance_activity.start_at",
                    "Data Type": "timestamptz",
                    "Best Path": "claims.activity.start_at for submission; claims.remittance_activity.start_at for remittance, per schema's ActivityStart.",
                    "AI Analysis": "Represents service start; consistent across schemas. Schema enforces DateTimeForm."
                },
                {
                    "Report Column": "Denial Category",
                    "Submission XML path": "Not in submission",
                    "Remittance XML path": "Claim/Activity/DenialCode (code may indicate category)",
                    "Notes / derivation": "Derived via lookup table mapping DenialCode to category. Type: ActivityDenialCode (xs:string, minLength: 1, source: eClaimLink coding sets).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Not stored",
                    "Remittance DB Path": "Derived from claims.remittance_activity.denial_code",
                    "Data Type": "text",
                    "Best Path": "Derived from claims.remittance_activity.denial_code via lookup table, per schema's ActivityDenialCode.",
                    "AI Analysis": "Requires external mapping to categorize denial codes. Schema provides DenialCode for remittance."
                },
                {
                    "Report Column": "Denial Code / DenialCode",
                    "Submission XML path": "Not in submission",
                    "Remittance XML path": "Claim/Activity/DenialCode",
                    "Notes / derivation": "Direct mapping to denial code for rejected activities. Type: ActivityDenialCode (xs:string, minLength: 1, source: http://www.eclaimlink.ae/CodingSets.aspx).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Not stored",
                    "Remittance DB Path": "claims.remittance_activity.denial_code",
                    "Data Type": "text",
                    "Best Path": "claims.remittance_activity.denial_code, per schema's ActivityDenialCode.",
                    "AI Analysis": "Available in remittance for denied activities; not in submission. Schema enforces string format."
                },
                {
                    "Report Column": "Denial Comment / DenialComment / Denial Reason Description",
                    "Submission XML path": "Claim/Comments (submission, if present)",
                    "Remittance XML path": "Claim/Comments (RA, if present)",
                    "Notes / derivation": "Free-text comments may include denial reasons. Type: RAComments (xs:string, minLength: 0, maxLength: 2000). Not explicitly in sample schemas but supported as comments.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.claim.comments",
                    "Remittance DB Path": "claims.remittance_claim.comments",
                    "Data Type": "text",
                    "Best Path": "claims.claim.comments for submission; claims.remittance_claim.comments for remittance, per schema's RAComments.",
                    "AI Analysis": "Schemas support free-text comments; may contain denial details. Requires parsing for specific denial comments."
                },
                {
                    "Report Column": "Denial Type",
                    "Submission XML path": "Not in submission",
                    "Remittance XML path": "Derived from Claim/Activity/DenialCode",
                    "Notes / derivation": "Map DenialCode to type via lookup table (e.g., MNEC-003 → 'Not clinically indicated'). Type: ActivityDenialCode (xs:string).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Not stored",
                    "Remittance DB Path": "Derived from claims_ref.denial_code.description",
                    "Data Type": "text",
                    "Best Path": "Derived from claims_ref.denial_code.description joined on denial_code = remittance_activity.denial_code, per schema's ActivityDenialCode.",
                    "AI Analysis": "Requires external mapping to convert denial code to type. Schema provides DenialCode."
                },
                {
                    "Report Column": "Diagnosis / PrimaryDiagnosis / SecondaryDiagnosis",
                    "Submission XML path": "Claim/Diagnosis/Code (submission, if present)",
                    "Remittance XML path": "Rarely in RA",
                    "Notes / derivation": "Diagnosis code from submission; typically not in remittance. Type: DiagnosisCode (xs:string, minLength: 1, ICD-10-CM standard).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.diagnosis.code",
                    "Remittance DB Path": "Not stored",
                    "Data Type": "text",
                    "Best Path": "claims.diagnosis.code, per schema's DiagnosisCode.",
                    "AI Analysis": "Primary source is submission; remittance rarely includes diagnosis. Schema enforces ICD-10-CM validation."
                },
                {
                    "Report Column": "EmiratesIDNumber / Emirates ID Number",
                    "Submission XML path": "Claim/EmiratesIDNumber",
                    "Remittance XML path": "Rare in RA",
                    "Notes / derivation": "Patient's government-issued ID. Type: ClaimEmiratesIDNumber (xs:string, format: XXX-XXXX-XXXXXXX-X, minLength: 1). Defaults for missing IDs provided in schema.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.claim.emirates_id_number",
                    "Remittance DB Path": "Not stored",
                    "Data Type": "text",
                    "Best Path": "claims.claim.emirates_id_number, per schema's ClaimEmiratesIDNumber.",
                    "AI Analysis": "Mandatory in submission; optional in remittance. Schema enforces format."
                },
                {
                    "Report Column": "Encounter Start Date / EncounterStart / EncounterStartYear",
                    "Submission XML path": "Claim/Encounter/Start or derive from earliest Claim/Activity/Start",
                    "Remittance XML path": "Claim/Activity/Start (RA)",
                    "Notes / derivation": "Prefer Encounter/Start; fallback to earliest Activity/Start. Type: EncounterStart (DateTimeForm: xs:string, dd/mm/yyyy HH:MM, >= 01/06/2012, <= 18/09/2025).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.encounter.start_at",
                    "Remittance DB Path": "min(claims.remittance_activity.start_at) over (partition by remittance_claim_id)",
                    "Data Type": "timestamptz",
                    "Best Path": "claims.encounter.start_at if available; else min(claims.activity.start_at) for submission; min(claims.remittance_activity.start_at) for remittance, per schema's EncounterStart and ActivityStart.",
                    "AI Analysis": "Primary source is Encounter/Start in submission; Activity/Start in remittance. Schema enforces date constraints."
                },
                {
                    "Report Column": "Encounter End Date / EncounterEndD",
                    "Submission XML path": "Claim/Encounter/End (if present)",
                    "Remittance XML path": "Not common in RA",
                    "Notes / derivation": "End of clinical care, optional for outpatients. Type: EncounterEnd (DateTimeForm: xs:string, dd/mm/yyyy HH:MM, >= EncounterStart, <= 18/09/2025).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.encounter.end_at",
                    "Remittance DB Path": "Not stored",
                    "Data Type": "timestamptz",
                    "Best Path": "claims.encounter.end_at, per schema's EncounterEnd.",
                    "AI Analysis": "Available in submission for inpatients/daycases; not in remittance schema. Schema enforces date constraints."
                },
                {
                    "Report Column": "Encounter Type",
                    "Submission XML path": "Claim/Encounter/Type or Claim/Activity/Type",
                    "Remittance XML path": "Claim/Activity/Type",
                    "Notes / derivation": "Classifies encounter (e.g., inpatient, outpatient). Type: EncounterType (xs:integer, enumeration: [1=Outpatient No ER, ..., 42=Ambulance Air/Water]). Fallback to ActivityType if needed.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.encounter.type",
                    "Remittance DB Path": "claims.remittance_activity.type",
                    "Data Type": "text",
                    "Best Path": "claims.encounter.type if present; else claims.activity.type for submission; claims.remittance_activity.type for remittance, per schema's EncounterType and ActivityType.",
                    "AI Analysis": "EncounterType preferred in submission; ActivityType used in remittance. Schema provides detailed enumeration."
                },
                {
                    "Report Column": "FacilityGroup / FacilityGroupID",
                    "Submission XML path": "Claim/Encounter/FacilityID or Claim/ProviderID",
                    "Remittance XML path": "Claim/Encounter/FacilityID or Claim/ProviderID",
                    "Notes / derivation": "Identifies facility or provider group. Types: EncounterFacilityID, ClaimProviderID (xs:string, minLength: 1, no spaces). Validated against eClaimLink coding sets.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.encounter.facility_id or claims.claim.provider_id",
                    "Remittance DB Path": "claims.remittance_claim.facility_id or claims.remittance_claim.provider_id",
                    "Data Type": "text",
                    "Best Path": "claims.encounter.facility_id (preferred) or claims.claim.provider_id for submission; similar for remittance, per schema's EncounterFacilityID and ClaimProviderID.",
                    "AI Analysis": "Maps to facility or provider ID; schemas support both. FacilityID preferred for encounter context."
                },
                {
                    "Report Column": "Facility ID / FacilityID",
                    "Submission XML path": "Claim/Encounter/FacilityID",
                    "Remittance XML path": "Claim/Encounter/FacilityID",
                    "Notes / derivation": "Direct mapping to facility identifier. Type: EncounterFacilityID (xs:string, minLength: 1, no spaces, source: eClaimLink coding sets).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.encounter.facility_id",
                    "Remittance DB Path": "claims.remittance_claim.facility_id",
                    "Data Type": "text",
                    "Best Path": "claims.encounter.facility_id for submission; claims.remittance_claim.facility_id for remittance, per schema's EncounterFacilityID.",
                    "AI Analysis": "Identifies facility hosting encounter; consistent across schemas. Schema enforces validation."
                },
                {
                    "Report Column": "Facility Name / Facility_Name",
                    "Submission XML path": "Not in XML (IDs only)",
                    "Remittance XML path": "Not in XML",
                    "Notes / derivation": "Resolve FacilityID to name via master data lookup. No schema type for name; EncounterFacilityID (xs:string) provides ID.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims_ref.facility.name",
                    "Remittance DB Path": "claims_ref.facility.name",
                    "Data Type": "text",
                    "Best Path": "claims_ref.facility.name joined on facility_code = encounter.facility_id, as schemas lack name field.",
                    "AI Analysis": "Requires external lookup; schemas only provide facility ID."
                },
                {
                    "Report Column": "First Remittance / First RA Date / First RA Amount",
                    "Submission XML path": "Not in submission",
                    "Remittance XML path": "Header/TransactionDate and Claim/Activity/PaymentAmount",
                    "Notes / derivation": "Earliest remittance date and amount from RA history. Types: HeaderTransactionDate (DateTimeForm: xs:string, dd/mm/yyyy HH:MM), ActivityPaymentAmount (xs:float, currency: AED).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Not stored",
                    "Remittance DB Path": "min(claims.remittance.tx_at) over (partition by claim_key_id), sum(claims.remittance_activity.payment_amount)",
                    "Data Type": "timestamptz / numeric(14,2)",
                    "Best Path": "min(claims.remittance.tx_at) and sum(claims.remittance_activity.payment_amount) from remittance, per schema's HeaderTransactionDate and ActivityPaymentAmount.",
                    "AI Analysis": "Tracks earliest remittance event; requires RA history analysis. Schema supports date and payment fields."
                },
                {
                    "Report Column": "Fully Paid Count / Fully Paid Amount",
                    "Submission XML path": "Derived",
                    "Remittance XML path": "Derived",
                    "Notes / derivation": "Count and sum where Activity/PaymentAmount equals Activity/Net. Types: ActivityPaymentAmount, ActivityNet (xs:float, currency: AED).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Derived",
                    "Remittance DB Path": "count(*) where claims.remittance_activity.payment_amount = net, sum(payment_amount) where payment_amount = net",
                    "Data Type": "integer / numeric(14,2)",
                    "Best Path": "count(*) and sum(payment_amount) where payment_amount = net from remittance_activity, per schema's ActivityPaymentAmount and ActivityNet.",
                    "AI Analysis": "Computed for activities fully paid in remittance. Schema supports payment comparison."
                },
                {
                    "Report Column": "Fully Rejected Count / Fully Rejected Amount",
                    "Submission XML path": "Derived",
                    "Remittance XML path": "Derived",
                    "Notes / derivation": "Count and sum where Activity/PaymentAmount = 0 or Activity/DenialCode present with payment=0. Types: ActivityPaymentAmount (xs:float), ActivityDenialCode (xs:string).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Derived",
                    "Remittance DB Path": "count(*) where claims.remittance_activity.payment_amount = 0 or denial_code is not null, sum(net) where payment_amount = 0",
                    "Data Type": "integer / numeric(14,2)",
                    "Best Path": "count(*) and sum(net) where payment_amount = 0 or denial_code is not null from remittance_activity, per schema's ActivityPaymentAmount and ActivityDenialCode.",
                    "AI Analysis": "Computed for fully rejected activities in remittance. Schema supports denial and payment data."
                },
                {
                    "Report Column": "Health Authority",
                    "Submission XML path": "Header/SenderID or Header/ReceiverID",
                    "Remittance XML path": "Header/SenderID or Header/ReceiverID",
                    "Notes / derivation": "Identifies authority via SenderID or ReceiverID (e.g., DHA). Types: HeaderSenderID, HeaderReceiverID (xs:string, minLength: 1, no spaces).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.ingestion_file.sender_id",
                    "Remittance DB Path": "claims.ingestion_file.receiver_id",
                    "Data Type": "text",
                    "Best Path": "claims.ingestion_file.sender_id for submission; claims.ingestion_file.receiver_id for remittance, per schema's HeaderSenderID and HeaderReceiverID.",
                    "AI Analysis": "Maps to sender/receiver IDs indicating authority or provider. Schema enforces string constraints."
                },
                {
                    "Report Column": "IDPayer",
                    "Submission XML path": "Claim/IDPayer",
                    "Remittance XML path": "Claim/IDPayer",
                    "Notes / derivation": "Payer's internal claim reference. Type: ClaimIDPayer (xs:string, minLength: 0, maxLength: 50). Mandatory in remittance; optional in submission.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.claim.id_payer",
                    "Remittance DB Path": "claims.remittance_claim.id_payer",
                    "Data Type": "text",
                    "Best Path": "claims.claim.id_payer or claims.remittance_claim.id_payer, per schema's ClaimIDPayer.",
                    "AI Analysis": "Critical for linking submission to remittance. Schema enforces string constraints."
                },
                {
                    "Report Column": "Initial Claim Amount",
                    "Submission XML path": "Sum of Claim/Activity/Net",
                    "Remittance XML path": "Sum of Claim/Activity/Net (echoed)",
                    "Notes / derivation": "Total billed amount from submission. Type: ActivityNet (xs:float, currency: AED).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.claim.net",
                    "Remittance DB Path": "sum(claims.remittance_activity.net) over (partition by remittance_claim_id)",
                    "Data Type": "numeric(14,2)",
                    "Best Path": "claims.claim.net for submission, per schema's ActivityNet.",
                    "AI Analysis": "Represents initial billed amount; echoed in remittance. Schema confirms xs:float."
                },
                {
                    "Report Column": "Initial Date Settlement / DateSettlement",
                    "Submission XML path": "Not in submission",
                    "Remittance XML path": "Claim/DateSettlement",
                    "Notes / derivation": "Date of claim settlement in remittance. Type: ClaimDateSettlement (DateTimeForm: xs:string, dd/mm/yyyy HH:MM, > TransactionDate).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Not stored",
                    "Remittance DB Path": "claims.remittance_claim.date_settlement",
                    "Data Type": "timestamptz",
                    "Best Path": "claims.remittance_claim.date_settlement, per schema's ClaimDateSettlement.",
                    "AI Analysis": "Primary in remittance; not typically in submission. Schema enforces date constraints."
                },
                {
                    "Report Column": "Initial Denial Code / InitialDenialCode",
                    "Submission XML path": "Not in submission",
                    "Remittance XML path": "Claim/Activity/DenialCode (earliest occurrence)",
                    "Notes / derivation": "Earliest denial code from remittance history. Type: ActivityDenialCode (xs:string, minLength: 1, source: eClaimLink coding sets).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Not stored",
                    "Remittance DB Path": "min(claims.remittance_activity.denial_code) over (partition by remittance_claim_id)",
                    "Data Type": "text",
                    "Best Path": "min(claims.remittance_activity.denial_code) from earliest RA, per schema's ActivityDenialCode.",
                    "AI Analysis": "Tracks first denial code in RA history. Schema provides DenialCode."
                },
                {
                    "Report Column": "Initial Denial Comment / InitialDenialComment",
                    "Submission XML path": "Claim/Comments (if present)",
                    "Remittance XML path": "Claim/Comments (RA, if present)",
                    "Notes / derivation": "Free-text comments may include initial denial reasons. Type: RAComments (xs:string, minLength: 0, maxLength: 2000). Not explicit in sample schemas.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.claim.comments",
                    "Remittance DB Path": "claims.remittance_claim.comments",
                    "Data Type": "text",
                    "Best Path": "claims.remittance_claim.comments for remittance; claims.claim.comments for submission if applicable, per schema's RAComments.",
                    "AI Analysis": "May contain denial details; requires parsing. Schema supports comments."
                },
                {
                    "Report Column": "Initial Denial Type",
                    "Submission XML path": "Derived from DenialCode mapping",
                    "Remittance XML path": "Derived from Claim/Activity/DenialCode",
                    "Notes / derivation": "Map DenialCode to type via lookup table (e.g., MNEC-003 → 'Not clinically indicated'). Type: ActivityDenialCode (xs:string).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Not stored",
                    "Remittance DB Path": "Derived from claims_ref.denial_code.description",
                    "Data Type": "text",
                    "Best Path": "Derived from claims_ref.denial_code.description joined on denial_code = remittance_activity.denial_code, per schema's ActivityDenialCode.",
                    "AI Analysis": "Requires external mapping to convert denial code to type. Schema provides DenialCode."
                },
                {
                    "Report Column": "Initial Net Amount / InitialNetAmt",
                    "Submission XML path": "Claim/Activity/Net",
                    "Remittance XML path": "Claim/Activity/Net (echoed)",
                    "Notes / derivation": "Net amount billed before payments. Type: ActivityNet (xs:float, currency: AED).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.activity.net",
                    "Remittance DB Path": "claims.remittance_activity.net",
                    "Data Type": "numeric(14,2)",
                    "Best Path": "claims.activity.net for submission; claims.remittance_activity.net for remittance, per schema's ActivityNet.",
                    "AI Analysis": "Initial billed amount from submission; echoed in remittance. Schema confirms xs:float."
                },
                {
                    "Report Column": "Initial Rejected Amount",
                    "Submission XML path": "Derived",
                    "Remittance XML path": "Sum of (Claim/Activity/Net - Claim/Activity/PaymentAmount) where PaymentAmount < Net",
                    "Notes / derivation": "Computed as difference between billed and paid amounts for partially or fully rejected activities. Types: ActivityNet, ActivityPaymentAmount (xs:float).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Derived",
                    "Remittance DB Path": "sum(claims.remittance_activity.net - payment_amount) where payment_amount < net",
                    "Data Type": "numeric(14,2)",
                    "Best Path": "sum(claims.remittance_activity.net - payment_amount) where payment_amount < net, per schema's ActivityNet and ActivityPaymentAmount.",
                    "AI Analysis": "Calculated from remittance data for rejected portions. Schema supports payment comparison."
                },
                {
                    "Report Column": "InvoiceNo",
                    "Submission XML path": "Claim/InvoiceNo (if present)",
                    "Remittance XML path": "Usually not present in RA",
                    "Notes / derivation": "Invoice number, if provided; else fallback to Claim/ID. Type: ClaimIDInvoice (xs:string, minLength: 1, maxLength: 25, format: Invoice1@Invoice2@... sorted alphabetically).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Not directly stored; fallback to claims.claim_key.claim_id",
                    "Remittance DB Path": "Not stored",
                    "Data Type": "text",
                    "Best Path": "claims.claim_key.claim_id as fallback if InvoiceNo not provided, per schema's ClaimIDInvoice and ClaimID.",
                    "AI Analysis": "Submission may include invoice number; remittance typically does not. Schema supports ClaimIDInvoice format."
                },
                {
                    "Report Column": "Last Denial Code",
                    "Submission XML path": "Not in submission",
                    "Remittance XML path": "Claim/Activity/DenialCode (latest occurrence)",
                    "Notes / derivation": "Most recent denial code from remittance history. Type: ActivityDenialCode (xs:string, minLength: 1).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Not stored",
                    "Remittance DB Path": "max(claims.remittance_activity.denial_code) over (partition by remittance_claim_id)",
                    "Data Type": "text",
                    "Best Path": "max(claims.remittance_activity.denial_code) from latest RA, per schema's ActivityDenialCode.",
                    "AI Analysis": "Tracks latest denial code in RA history. Schema provides DenialCode."
                },
                {
                    "Report Column": "Last Remittance File",
                    "Submission XML path": "Not in submission content",
                    "Remittance XML path": "RA file metadata (Header/TransactionDate, SenderID, ReceiverID)",
                    "Notes / derivation": "Filename from external metadata; Header fields assist identification. Types: HeaderTransactionDate (DateTimeForm), HeaderSenderID, HeaderReceiverID (xs:string).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Not stored",
                    "Remittance DB Path": "claims.ingestion_file.file_id where root_type = 2 order by transaction_date desc limit 1",
                    "Data Type": "text",
                    "Best Path": "claims.ingestion_file.file_id where root_type = 2 order by transaction_date desc limit 1, per schema's HeaderTransactionDate, HeaderSenderID, HeaderReceiverID.",
                    "AI Analysis": "Requires file metadata; schema supports header fields for context."
                },
                {
                    "Report Column": "Last Remittance Transaction ID",
                    "Submission XML path": "Not in submission",
                    "Remittance XML path": "RA Header or file exchange metadata",
                    "Notes / derivation": "Transaction ID from file transmission logs. No direct schema type; HeaderTransactionDate (DateTimeForm) may assist.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Not stored",
                    "Remittance DB Path": "Derived from claims.ingestion_file",
                    "Data Type": "text",
                    "Best Path": "Derived from claims.ingestion_file (e.g., file_id or transaction_date), as schema lacks explicit transaction ID.",
                    "AI Analysis": "External metadata; not directly in schema. Header fields provide context."
                },
                {
                    "Report Column": "Last Remitted Amount / LastRemittedAmount",
                    "Submission XML path": "Not in submission",
                    "Remittance XML path": "Claim/Activity/PaymentAmount for latest RA",
                    "Notes / derivation": "Payment amount from most recent remittance. Type: ActivityPaymentAmount (xs:float, currency: AED).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Not stored",
                    "Remittance DB Path": "sum(claims.remittance_activity.payment_amount) where remittance_id = (select max(id) from claims.remittance)",
                    "Data Type": "numeric(14,2)",
                    "Best Path": "sum(claims.remittance_activity.payment_amount) for latest remittance_id, per schema's ActivityPaymentAmount.",
                    "AI Analysis": "Tracks payment from latest RA. Schema confirms xs:float for payments."
                },
                {
                    "Report Column": "Last Resubmission",
                    "Submission XML path": "Not in single XML",
                    "Remittance XML path": "Not in RA",
                    "Notes / derivation": "Tracks latest resubmission event from submission history. Type: ResubmissionType (xs:string, enumeration: [correction, internal complaint, legacy, reconciliation]).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "max(claims.claim_event.event_time) where type = 2",
                    "Remittance DB Path": "Not stored",
                    "Data Type": "timestamptz",
                    "Best Path": "max(claims.claim_event.event_time) where type = 2, per schema's ResubmissionType.",
                    "AI Analysis": "Requires submission history; schema supports resubmission tracking."
                },
                {
                    "Report Column": "Last Submission File / LastSubmissionFile",
                    "Submission XML path": "Submission file metadata",
                    "Remittance XML path": "Not in RA",
                    "Notes / derivation": "Filename from submission exchange logs. Type: ResubmissionType (xs:string); HeaderTransactionDate (DateTimeForm) assists. No direct file metadata in schema.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.ingestion_file.file_id where root_type = 1 order by transaction_date desc limit 1",
                    "Remittance DB Path": "Not stored",
                    "Data Type": "text",
                    "Best Path": "claims.ingestion_file.file_id where root_type = 1 order by transaction_date desc limit 1, as schema lacks file metadata.",
                    "AI Analysis": "External metadata; schema supports resubmission context."
                },
                {
                    "Report Column": "Last Submission Transaction ID / SubmissionAllTransactionsId",
                    "Submission XML path": "Submission system metadata",
                    "Remittance XML path": "Not in RA",
                    "Notes / derivation": "Transaction ID from submission logs. No direct schema type; HeaderTransactionDate (DateTimeForm) may assist.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Derived from claims.ingestion_file",
                    "Remittance DB Path": "Not stored",
                    "Data Type": "text",
                    "Best Path": "Derived from claims.ingestion_file (e.g., file_id or transaction_date), as schema lacks explicit transaction ID.",
                    "AI Analysis": "External metadata; not in schema. Header fields provide context."
                },
                {
                    "Report Column": "MemberID",
                    "Submission XML path": "Claim/MemberID",
                    "Remittance XML path": "Sometimes present in RA under claim nodes",
                    "Notes / derivation": "Patient's insurance member ID. Type: ClaimMemberID (xs:string, minLength: 0, maxLength: 30, empty for self-pay).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.claim.member_id",
                    "Remittance DB Path": "Not directly stored",
                    "Data Type": "text",
                    "Best Path": "claims.claim.member_id, per schema's ClaimMemberID.",
                    "AI Analysis": "Primary in submission; optional in remittance. Schema enforces string constraints."
                },
                {
                    "Report Column": "Month / Year",
                    "Submission XML path": "Derived from Claim/Header/TransactionDate",
                    "Remittance XML path": "Derived from Claim/Header/TransactionDate or Claim/DateSettlement",
                    "Notes / derivation": "Extract month/year from TransactionDate or DateSettlement. Types: HeaderTransactionDate, ClaimDateSettlement (DateTimeForm: xs:string, dd/mm/yyyy HH:MM).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "extract(month from claims.claim.tx_at) / extract(year from claims.claim.tx_at)",
                    "Remittance DB Path": "extract(month from claims.remittance_claim.date_settlement) / extract(year from claims.remittance_claim.date_settlement)",
                    "Data Type": "integer / integer",
                    "Best Path": "Prefer extract(month/year from claims.remittance_claim.date_settlement); else extract from claims.claim.tx_at, per schema's DateTimeForm.",
                    "AI Analysis": "Prefers settlement date for remittance; transaction date for submission. Schema enforces date format."
                },
                {
                    "Report Column": "Net Amount / NetAmt",
                    "Submission XML path": "Claim/Activity/Net",
                    "Remittance XML path": "Claim/Activity/Net",
                    "Notes / derivation": "Net amount billed per activity. Type: ActivityNet (xs:float, currency: AED).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.activity.net",
                    "Remittance DB Path": "claims.remittance_activity.net",
                    "Data Type": "numeric(14,2)",
                    "Best Path": "claims.activity.net for submission; claims.remittance_activity.net for remittance, per schema's ActivityNet.",
                    "AI Analysis": "Billed amount in submission; echoed in remittance. Schema confirms xs:float."
                },
                {
                    "Report Column": "Ordering Clinician / OrderingClinician_Name",
                    "Submission XML path": "Claim/Activity/Clinician",
                    "Remittance XML path": "Claim/Activity/Clinician",
                    "Notes / derivation": "Clinician ID; no separate ordering clinician in schemas. Type: ActivityClinician (xs:string, minLength: 1, no spaces). Name requires lookup.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.activity.clinician",
                    "Remittance DB Path": "claims.remittance_activity.clinician",
                    "Data Type": "text",
                    "Best Path": "claims.activity.clinician or claims.remittance_activity.clinician for ID; claims_ref.clinician.name for name, per schema's ActivityClinician.",
                    "AI Analysis": "Schemas use ActivityClinician; no distinct ordering clinician field. Name requires external lookup."
                },
                {
                    "Report Column": "Outstanding Balance / PendingAmt / PendingRemittanceAmt",
                    "Submission XML path": "Derived",
                    "Remittance XML path": "Derived",
                    "Notes / derivation": "Computed as sum(Activity/Net) - sum(Activity/PaymentAmount). Types: ActivityNet, ActivityPaymentAmount (xs:float, currency: AED).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Derived: claims.claim.net - sum(claims.remittance_activity.payment_amount)",
                    "Remittance DB Path": "Derived: sum(claims.remittance_activity.net) - sum(payment_amount)",
                    "Data Type": "numeric(14,2)",
                    "Best Path": "claims.claim.net - sum(claims.remittance_activity.payment_amount) joining on claim_key_id, per schema's ActivityNet and ActivityPaymentAmount.",
                    "AI Analysis": "Represents unpaid balance; calculated from remittance data. Schema supports payment comparison."
                },
                {
                    "Report Column": "Paid Amount / RemittedAmt / RemittanceAmt / PaymentAmt / Total Paid",
                    "Submission XML path": "Not in submission",
                    "Remittance XML path": "Claim/Activity/PaymentAmount",
                    "Notes / derivation": "Amount paid per activity; sum for claim total. Type: ActivityPaymentAmount (xs:float, currency: AED).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Not stored",
                    "Remittance DB Path": "claims.remittance_activity.payment_amount",
                    "Data Type": "numeric(14,2)",
                    "Best Path": "claims.remittance_activity.payment_amount (sum for claim-level), per schema's ActivityPaymentAmount.",
                    "AI Analysis": "Directly from remittance; sums for claim-level total. Schema confirms xs:float."
                },
                {
                    "Report Column": "Partially Paid Amount / Partially Paid Count",
                    "Submission XML path": "Derived",
                    "Remittance XML path": "Derived",
                    "Notes / derivation": "Count and sum where Activity/PaymentAmount > 0 and < Activity/Net. Types: ActivityPaymentAmount, ActivityNet (xs:float).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Derived",
                    "Remittance DB Path": "count(*) where claims.remittance_activity.payment_amount > 0 and payment_amount < net, sum(payment_amount) where payment_amount > 0 and payment_amount < net",
                    "Data Type": "integer / numeric(14,2)",
                    "Best Path": "count(*) and sum(payment_amount) where payment_amount > 0 and < net from remittance_activity, per schema's ActivityPaymentAmount and ActivityNet.",
                    "AI Analysis": "Computed for partially paid activities in remittance. Schema supports payment comparison."
                },
                {
                    "Report Column": "Payment Reference / PaymentReference",
                    "Submission XML path": "Not in submission",
                    "Remittance XML path": "Claim/PaymentReference",
                    "Notes / derivation": "Identifier for payment transaction (e.g., cheque number). Type: ClaimPaymentReference (xs:string, maxLength: 25).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Not stored",
                    "Remittance DB Path": "claims.remittance_claim.payment_reference",
                    "Data Type": "text",
                    "Best Path": "claims.remittance_claim.payment_reference, per schema's ClaimPaymentReference.",
                    "AI Analysis": "Mandatory in remittance for tracking payments. Schema enforces string constraints."
                },
                {
                    "Report Column": "Payment Status / ReceiptStatus",
                    "Submission XML path": "Not explicit",
                    "Remittance XML path": "Not explicit",
                    "Notes / derivation": "Inferred from Activity/PaymentAmount: 0 = unpaid, =Net = paid, <Net = partial. Type: ActivityPaymentAmount (xs:float).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Derived",
                    "Remittance DB Path": "case when claims.remittance_activity.payment_amount = 0 then 'unpaid' when payment_amount = net then 'paid' else 'partial'",
                    "Data Type": "text",
                    "Best Path": "case when claims.remittance_activity.payment_amount = 0 then 'unpaid' when payment_amount = net then 'paid' else 'partial', per schema's ActivityPaymentAmount.",
                    "AI Analysis": "Derived from remittance payment data; not a direct schema field. Schema supports derivation."
                },
                {
                    "Report Column": "Pending Amount / PendingRemittanceAmt",
                    "Submission XML path": "Derived",
                    "Remittance XML path": "Derived",
                    "Notes / derivation": "Same as Outstanding Balance: sum(Activity/Net) - sum(Activity/PaymentAmount). Types: ActivityNet, ActivityPaymentAmount (xs:float).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Derived: claims.claim.net - sum(claims.remittance_activity.payment_amount)",
                    "Remittance DB Path": "Derived: sum(claims.remittance_activity.net) - sum(payment_amount)",
                    "Data Type": "numeric(14,2)",
                    "Best Path": "claims.claim.net - sum(claims.remittance_activity.payment_amount) joining on claim_key_id, per schema's ActivityNet and ActivityPaymentAmount.",
                    "AI Analysis": "Computed unpaid balance; identical to Outstanding Balance calculation. Schema supports payment comparison."
                },
                {
                    "Report Column": "Prior Authorization ID / PriorAuthorizationID",
                    "Submission XML path": "Claim/Activity/PriorAuthorizationID",
                    "Remittance XML path": "Claim/Activity/PriorAuthorizationID",
                    "Notes / derivation": "Links to prior authorization, if applicable. Type: ActivityPriorAuthorizationID (xs:string, minLength: 0, maxLength: 50).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.activity.prior_authorization_id",
                    "Remittance DB Path": "claims.remittance_activity.prior_authorization_id",
                    "Data Type": "text",
                    "Best Path": "claims.activity.prior_authorization_id or claims.remittance_activity.prior_authorization_id, per schema's ActivityPriorAuthorizationID.",
                    "AI Analysis": "Optional in both schemas; links activity to authorization. Schema enforces string constraints."
                },
                {
                    "Report Column": "Primary Diagnosis / Secondary Diagnosis",
                    "Submission XML path": "Claim/Diagnosis/Code where type=primary or secondary",
                    "Remittance XML path": "Usually not in RA",
                    "Notes / derivation": "Diagnosis codes with type specified. Types: DiagnosisType (xs:string, enumeration: [Principal, Secondary, Admitting]), DiagnosisCode (xs:string, minLength: 1, ICD-10-CM).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.diagnosis.code where diag_type = 'primary' or 'secondary'",
                    "Remittance DB Path": "Not stored",
                    "Data Type": "text",
                    "Best Path": "claims.diagnosis.code where diag_type = 'primary' or 'secondary', per schema's DiagnosisType and DiagnosisCode.",
                    "AI Analysis": "Submission is primary source for diagnoses; remittance rarely includes. Schema enforces ICD-10-CM standard."
                },
                {
                    "Report Column": "Quantity",
                    "Submission XML path": "Claim/Activity/Quantity",
                    "Remittance XML path": "Claim/Activity/Quantity",
                    "Notes / derivation": "Number of units for procedure or service. Type: ActivityQuantity (xs:float, minInclusive: 0).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.activity.quantity",
                    "Remittance DB Path": "claims.remittance_activity.quantity",
                    "Data Type": "numeric(14,2)",
                    "Best Path": "claims.activity.quantity or claims.remittance_activity.quantity, per schema's ActivityQuantity.",
                    "AI Analysis": "Direct mapping to units; consistent across schemas. Schema confirms xs:float."
                },
                {
                    "Report Column": "ReceiverID / Receiver ID",
                    "Submission XML path": "Header/ReceiverID",
                    "Remittance XML path": "Header/ReceiverID",
                    "Notes / derivation": "Identifies recipient of transaction. Type: HeaderReceiverID (xs:string, minLength: 1, no spaces). Swaps with SenderID in paired transactions.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.ingestion_file.receiver_id",
                    "Remittance DB Path": "claims.ingestion_file.receiver_id",
                    "Data Type": "text",
                    "Best Path": "claims.ingestion_file.receiver_id for both, per schema's HeaderReceiverID.",
                    "AI Analysis": "Critical for transaction pairing; consistent across schemas. Schema enforces string constraints."
                },
                {
                    "Report Column": "Receiver Name / Receiver_Name",
                    "Submission XML path": "Not in XML (IDs only)",
                    "Remittance XML path": "Not in XML",
                    "Notes / derivation": "Resolve ReceiverID to name via master data lookup. Type: HeaderReceiverID (xs:string) provides ID only.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims_ref.payer.name",
                    "Remittance DB Path": "claims_ref.payer.name",
                    "Data Type": "text",
                    "Best Path": "claims_ref.payer.name joined on payer_code = ingestion_file.receiver_id, as schemas lack name field.",
                    "AI Analysis": "Requires external lookup; schemas only provide receiver ID."
                },
                {
                    "Report Column": "Rejected Amount / RejectedAmt / Rejection Amount",
                    "Submission XML path": "Derived",
                    "Remittance XML path": "Sum of (Claim/Activity/Net - Claim/Activity/PaymentAmount) where PaymentAmount < Net",
                    "Notes / derivation": "Computed as difference between billed and paid amounts for rejected activities. Types: ActivityNet, ActivityPaymentAmount (xs:float).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Derived",
                    "Remittance DB Path": "sum(claims.remittance_activity.net - payment_amount) where payment_amount < net",
                    "Data Type": "numeric(14,2)",
                    "Best Path": "sum(claims.remittance_activity.net - payment_amount) where payment_amount < net, per schema's ActivityNet and ActivityPaymentAmount.",
                    "AI Analysis": "Calculated from remittance data for rejected portions. Schema supports payment comparison."
                },
                {
                    "Report Column": "Rejected but Not Resubmitted",
                    "Submission XML path": "Not in single submission",
                    "Remittance XML path": "Not in RA",
                    "Notes / derivation": "Requires comparison of submission history (ResubmissionType) vs remittance rejections. Type: ResubmissionType (xs:string, enumeration: [correction, internal complaint, legacy, reconciliation]).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Derived from claims.claim_event where type != 2 and status = 5",
                    "Remittance DB Path": "Derived",
                    "Data Type": "boolean",
                    "Best Path": "Derived from claims.claim_event and claim_status_timeline where no resubmission after rejection, per schema's ResubmissionType.",
                    "AI Analysis": "Tracks rejections without resubmission; requires history analysis. Schema supports resubmission trackingodeling"
                },
                {
                    "Report Column": "Rejected Claim Count / RejectedClaim",
                    "Submission XML path": "Derived",
                    "Remittance XML path": "Derived",
                    "Notes / derivation": "Count of claims with any rejected amount (PaymentAmount < Net). Types: ActivityPaymentAmount, ActivityNet (xs:float).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Derived",
                    "Remittance DB Path": "count(distinct remittance_claim_id) where exists (select 1 from claims.remittance_activity where payment_amount < net)",
                    "Data Type": "integer",
                    "Best Path": "count(distinct remittance_claim_id) where any activity rejected, per schema's ActivityPaymentAmount and ActivityNet.",
                    "AI Analysis": "Computed from remittance data for claims with rejected activities. Schema supports payment comparison."
                },
                {
                    "Report Column": "Rejection Count / Rejection Number",
                    "Submission XML path": "Derived",
                    "Remittance XML path": "Derived",
                    "Notes / derivation": "Count of activities with DenialCode or PaymentAmount = 0. Type: ActivityDenialCode (xs:string).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Derived",
                    "Remittance DB Path": "count(*) where claims.remittance_activity.denial_code is not null or payment_amount = 0",
                    "Data Type": "integer",
                    "Best Path": "count(*) where denial_code is not null or payment_amount = 0 from remittance_activity, per schema's ActivityDenialCode and ActivityPaymentAmount.",
                    "AI Analysis": "Counts rejected activities in remittance. Schema provides DenialCode."
                },
                {
                    "Report Column": "Rejection Percentage / RejectionPerc / Rejection %",
                    "Submission XML path": "Derived",
                    "Remittance XML path": "Derived",
                    "Notes / derivation": "(sum(Activity/Net - Activity/PaymentAmount) / sum(Activity/Net)) * 100. Types: ActivityNet, ActivityPaymentAmount (xs:float). Denominator is total billed amount.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Derived",
                    "Remittance DB Path": "(sum(claims.remittance_activity.net - payment_amount) / sum(net)) * 100 where net > 0",
                    "Data Type": "numeric",
                    "Best Path": "(sum(claims.remittance_activity.net - payment_amount) / sum(net)) * 100 from remittance_activity, per schema's ActivityNet and ActivityPaymentAmount.",
                    "AI Analysis": "Computed metric for rejection rate; uses remittance data. Schema supports float-based calculations."
                },
                {
                    "Report Column": "Rejection Type",
                    "Submission XML path": "Derived from DenialCode mapping",
                    "Remittance XML path": "Claim/Activity/DenialCode",
                    "Notes / derivation": "Map DenialCode to type via lookup table (e.g., MNEC-003 → 'Not clinically indicated'). Type: ActivityDenialCode (xs:string, minLength: 1).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Not stored",
                    "Remittance DB Path": "claims_ref.denial_code.description",
                    "Data Type": "text",
                    "Best Path": "claims_ref.denial_code.description joined on denial_code = remittance_activity.denial_code, per schema's ActivityDenialCode.",
                    "AI Analysis": "Requires external mapping to convert denial code to type. Schema provides DenialCode."
                },
                {
                    "Report Column": "Remittance Amount / Remitted Amount / RemittedAmt / RemittanceAmt",
                    "Submission XML path": "Not in submission",
                    "Remittance XML path": "Claim/Activity/PaymentAmount",
                    "Notes / derivation": "Paid amount per activity; sum for claim total. Type: ActivityPaymentAmount (xs:float, currency: AED).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Not stored",
                    "Remittance DB Path": "claims.remittance_activity.payment_amount",
                    "Data Type": "numeric(14,2)",
                    "Best Path": "claims.remittance_activity.payment_amount (sum for claim-level), per schema's ActivityPaymentAmount.",
                    "AI Analysis": "Directly from remittance; sums for claim-level total. Schema confirms xs:float."
                },
                {
                    "Report Column": "Remittance Comments / RemittanceComment",
                    "Submission XML path": "Claim/Comments (submission, if present)",
                    "Remittance XML path": "Claim/Comments (RA, if present)",
                    "Notes / derivation": "Free-text comments may explain payments or denials. Type: RAComments (xs:string, minLength: 0, maxLength: 2000).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.claim.comments",
                    "Remittance DB Path": "claims.remittance_claim.comments",
                    "Data Type": "text",
                    "Best Path": "claims.claim.comments for submission; claims.remittance_claim.comments for remittance, per schema's RAComments.",
                    "AI Analysis": "Applicable to both schemas; may contain payment or denial details. Schema supports comments."
                },
                {
                    "Report Column": "Remittance Count / RemittanceCount",
                    "Submission XML path": "Not explicit",
                    "Remittance XML path": "Not explicit (requires RA file history)",
                    "Notes / derivation": "Count of remittance files from history. No direct schema type; HeaderRecordCount (xs:nonNegativeInteger) provides claim count context.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Derived",
                    "Remittance DB Path": "count(distinct claims.remittance.id) over (partition by claim_key_id)",
                    "Data Type": "integer",
                    "Best Path": "count(distinct claims.remittance.id) per claim_key_id, as schema lacks direct count but supports HeaderRecordCount.",
                    "AI Analysis": "Requires history analysis; schema supports record count for context."
                },
                {
                    "Report Column": "Remittance Date / TransactionDate",
                    "Submission XML path": "Header/TransactionDate",
                    "Remittance XML path": "Header/TransactionDate",
                    "Notes / derivation": "Transaction timestamp for submission or remittance. Type: HeaderTransactionDate (DateTimeForm: xs:string, dd/mm/yyyy HH:MM, <= 18/09/2025).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.ingestion_file.transaction_date where root_type = 1",
                    "Remittance DB Path": "claims.ingestion_file.transaction_date where root_type = 2",
                    "Data Type": "timestamptz",
                    "Best Path": "claims.ingestion_file.transaction_date, per schema's HeaderTransactionDate.",
                    "AI Analysis": "Directly from header; remittance date > submission date. Schema enforces date format."
                },
                {
                    "Report Column": "Remitted Claim Count / RemittedClaim",
                    "Submission XML path": "Derived",
                    "Remittance XML path": "Derived",
                    "Notes / derivation": "Count of claims with PaymentAmount > 0. Type: ActivityPaymentAmount (xs:float).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Derived",
                    "Remittance DB Path": "count(distinct remittance_claim_id) where exists (select 1 from claims.remittance_activity where payment_amount > 0)",
                    "Data Type": "integer",
                    "Best Path": "count(distinct remittance_claim_id) where sum(payment_amount) > 0, per schema's ActivityPaymentAmount.",
                    "AI Analysis": "Computed from remittance data for claims with payments. Schema supports payment data."
                },
                {
                    "Report Column": "Resubmission Amount (1st,2nd,3rd...)",
                    "Submission XML path": "Not in single submission",
                    "Remittance XML path": "Not in RA",
                    "Notes / derivation": "Track resubmission net amounts from submission history. Type: ResubmissionType (xs:string, enumeration: [correction, internal complaint, legacy, reconciliation]); ActivityNet (xs:float).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Derived from claims.claim_event where type = 2 and claims.activity.net",
                    "Remittance DB Path": "Not stored",
                    "Data Type": "numeric(14,2)",
                    "Best Path": "Derived from claims.claim_event and claims.activity.net where type = 2, per schema's ResubmissionType and ActivityNet.",
                    "AI Analysis": "Requires submission history to track resubmission amounts. Schema supports resubmission tracking."
                },
                {
                    "Report Column": "Resubmission Comment",
                    "Submission XML path": "Claim/Resubmission/Comment",
                    "Remittance XML path": "Not in RA",
                    "Notes / derivation": "Free-text explanation for resubmission. Type: ResubmissionComment (xs:string, minLength: 0, maxLength: 2000).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.claim_resubmission.comment",
                    "Remittance DB Path": "Not stored",
                    "Data Type": "text",
                    "Best Path": "claims.claim_resubmission.comment, per schema's ResubmissionComment.",
                    "AI Analysis": "Directly from submission resubmission comments. Schema enforces string constraints."
                },
                {
                    "Report Column": "Resubmission Count",
                    "Submission XML path": "Not in single XML",
                    "Remittance XML path": "Not in RA",
                    "Notes / derivation": "Count of resubmission events from history. Type: ResubmissionType (xs:string, enumeration: [correction, internal complaint, legacy, reconciliation]).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "count(*) from claims.claim_event where type = 2",
                    "Remittance DB Path": "Not stored",
                    "Data Type": "integer",
                    "Best Path": "count(*) from claims.claim_event where type = 2 per claim_key_id, per schema's ResubmissionType.",
                    "AI Analysis": "Counts resubmission events; requires history. Schema supports resubmission tracking."
                },
                {
                    "Report Column": "Resubmission File (1st,2nd...)",
                    "Submission XML path": "Submission file metadata",
                    "Remittance XML path": "Not in RA",
                    "Notes / derivation": "Filename from submission logs for resubmissions. Type: ResubmissionType (xs:string); HeaderTransactionDate (DateTimeForm) assists. No direct file metadata in schema.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.ingestion_file.file_id where exists (select 1 from claims.claim_event where type = 2)",
                    "Remittance DB Path": "Not stored",
                    "Data Type": "text",
                    "Best Path": "claims.ingestion_file.file_id linked to resubmission events (type=2), as schema lacks file metadata.",
                    "AI Analysis": "External metadata; schema supports resubmission context."
                },
                {
                    "Report Column": "Resubmission Type",
                    "Submission XML path": "Claim/Resubmission/Type",
                    "Remittance XML path": "Not in RA",
                    "Notes / derivation": "Categorizes resubmission purpose. Type: ResubmissionType (xs:string, enumeration: [correction, internal complaint, legacy, reconciliation]).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.claim_resubmission.resubmission_type",
                    "Remittance DB Path": "Not stored",
                    "Data Type": "text",
                    "Best Path": "claims.claim_resubmission.resubmission_type, per schema's ResubmissionType.",
                    "AI Analysis": "Directly from submission; specifies resubmission reason. Schema provides enumerated values."
                },
                {
                    "Report Column": "Resubmission Pending Remittance Amount",
                    "Submission XML path": "Derived",
                    "Remittance XML path": "Derived",
                    "Notes / derivation": "After resubmission, compute sum(Activity/Net - Activity/PaymentAmount) from subsequent RA. Types: ActivityNet, ActivityPaymentAmount (xs:float).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Derived from claims.claim_event where type = 2 and claims.activity.net",
                    "Remittance DB Path": "Derived: sum(claims.remittance_activity.net - payment_amount) after resubmission event",
                    "Data Type": "numeric(14,2)",
                    "Best Path": "sum(claims.remittance_activity.net - payment_amount) after latest resubmission event, per schema's ActivityNet and ActivityPaymentAmount.",
                    "AI Analysis": "Tracks unpaid amounts post-resubmission; requires history analysis. Schema supports payment comparison."
                },
                {
                    "Report Column": "Secondary Diagnosis",
                    "Submission XML path": "Claim/Diagnosis/Code where type=secondary",
                    "Remittance XML path": "Usually not in RA",
                    "Notes / derivation": "Diagnosis codes for secondary conditions. Types: DiagnosisType (xs:string, enumeration: [Principal, Secondary, Admitting]), DiagnosisCode (xs:string, minLength: 1, ICD-10-CM).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.diagnosis.code where diag_type = 'secondary'",
                    "Remittance DB Path": "Not stored",
                    "Data Type": "text",
                    "Best Path": "claims.diagnosis.code where diag_type = 'secondary', per schema's DiagnosisType and DiagnosisCode.",
                    "AI Analysis": "Specific to secondary diagnoses in submission; not in remittance. Schema enforces ICD-10-CM standard."
                },
                {
                    "Report Column": "Self Pay Count / Self Pay Amount",
                    "Submission XML path": "Claim/PayerID (if 'Self-Paid')",
                    "Remittance XML path": "May appear in RA as Claim/PayerID",
                    "Notes / derivation": "Identifies self-pay claims via PayerID. Type: ClaimPayerID (xs:string, minLength: 1, e.g., 'Self-Paid'). Pending sample XML for corporate self-pay.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "count(*) and sum(claims.activity.net) where claims.claim.payer_id = 'Self-Paid'",
                    "Remittance DB Path": "Derived from claims.remittance_claim.payer_id",
                    "Data Type": "integer / numeric(14,2)",
                    "Best Path": "count(*) and sum(claims.activity.net) where claims.claim.payer_id = 'Self-Paid'; remittance via claims.remittance_claim.payer_id, per schema's ClaimPayerID.",
                    "AI Analysis": "Schemas support 'Self-Paid' via PayerID; count and amount derived from claims with PayerID='Self-Paid'."
                },
                {
                    "Report Column": "Settled Amount / SettledAmt",
                    "Submission XML path": "Not in submission",
                    "Remittance XML path": "Claim/Activity/PaymentAmount",
                    "Notes / derivation": "Payment amount per activity denotes settled amount. Type: ActivityPaymentAmount (xs:float, currency: AED).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Not stored",
                    "Remittance DB Path": "claims.remittance_activity.payment_amount",
                    "Data Type": "numeric(14,2)",
                    "Best Path": "claims.remittance_activity.payment_amount, per schema's ActivityPaymentAmount.",
                    "AI Analysis": "Directly from remittance payment data. Schema confirms xs:float."
                },
                {
                    "Report Column": "Submission Transaction ID / SubmissionAllTransactionsId",
                    "Submission XML path": "Submission system metadata",
                    "Remittance XML path": "Not in RA",
                    "Notes / derivation": "Transaction ID from submission logs. No direct schema type; HeaderTransactionDate (DateTimeForm) may assist.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Derived from claims.ingestion_file",
                    "Remittance DB Path": "Not stored",
                    "Data Type": "text",
                    "Best Path": "Derived from claims.ingestion_file (e.g., file_id or transaction_date), as schema lacks explicit transaction ID.",
                    "AI Analysis": "External metadata; not in schema. Header fields provide context."
                },
                {
                    "Report Column": "SubAmt / Submitted Amount",
                    "Submission XML path": "Claim/Activity/Net",
                    "Remittance XML path": "Claim/Activity/Net (echoed)",
                    "Notes / derivation": "Net amount submitted per activity/claim. Type: ActivityNet (xs:float, currency: AED).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.activity.net",
                    "Remittance DB Path": "claims.remittance_activity.net",
                    "Data Type": "numeric(14,2)",
                    "Best Path": "claims.activity.net for submission; claims.remittance_activity.net for remittance, per schema's ActivityNet.",
                    "AI Analysis": "Billed amount in submission; echoed in remittance. Schema confirms xs:float."
                },
                {
                    "Report Column": "Taken Back Amount / Taken Back Count",
                    "Submission XML path": "Not in XMLs",
                    "Remittance XML path": "Not in XMLs",
                    "Notes / derivation": "Adjustments tracked in accounting/adjustment feed. Not supported in provided schemas; requires sample XML for take-back.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Not stored",
                    "Remittance DB Path": "Not stored",
                    "Data Type": "numeric(14,2) / integer",
                    "Best Path": "Not stored; track externally in adjustment feed, as schemas lack this field.",
                    "AI Analysis": "Requires external feed; not in schemas. Pending sample XML for take-back adjustments."
                },
                {
                    "Report Column": "Total Claim Count / TotalClaim",
                    "Submission XML path": "Count of <Claim> nodes in submission",
                    "Remittance XML path": "Count of <Claim> nodes in RA (Header/RecordCount gives count)",
                    "Notes / derivation": "Use XML record counts or count <Claim> elements. Type: HeaderRecordCount (xs:nonNegativeInteger).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "count(*) from claims.claim",
                    "Remittance DB Path": "claims.ingestion_file.record_count_declared where root_type = 2",
                    "Data Type": "integer",
                    "Best Path": "count(*) from claims.claim for submission; claims.ingestion_file.record_count_declared for remittance, per schema's HeaderRecordCount.",
                    "AI Analysis": "Directly from header or element count. Schema supports record count for file-level context."
                },
                {
                    "Report Column": "Total Paid / Total RA / Total RA Amount",
                    "Submission XML path": "Derived",
                    "Remittance XML path": "Sum of all Claim/Activity/PaymentAmount in RA (sum across claims)",
                    "Notes / derivation": "Total remitted amount in RA file. Type: ActivityPaymentAmount (xs:float, currency: AED).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Derived",
                    "Remittance DB Path": "sum(claims.remittance_activity.payment_amount) over (partition by remittance_id)",
                    "Data Type": "numeric(14,2)",
                    "Best Path": "sum(claims.remittance_activity.payment_amount) over (partition by remittance_id), per schema's ActivityPaymentAmount.",
                    "AI Analysis": "Sum of all payments in remittance file. Schema confirms xs:float for payment tracking."
                },
                {
                    "Report Column": "Transaction Date / TransactionDat",
                    "Submission XML path": "Header/TransactionDate",
                    "Remittance XML path": "Header/TransactionDate",
                    "Notes / derivation": "File transaction timestamp. Type: HeaderTransactionDate (DateTimeForm: xs:string, dd/mm/yyyy HH:MM, <= 18/09/2025).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.ingestion_file.transaction_date",
                    "Remittance DB Path": "claims.ingestion_file.transaction_date",
                    "Data Type": "timestamptz",
                    "Best Path": "claims.ingestion_file.transaction_date, per schema's HeaderTransactionDate.",
                    "AI Analysis": "Directly from header; remittance date > submission date. Schema enforces date format."
                },
                {
                    "Report Column": "Write-off Amount / WriteOffAmt / Write-off Status / Write-off Comment",
                    "Submission XML path": "Sometimes in RA as adjustments or in Claim/Comments",
                    "Remittance XML path": "Sometimes in RA or external adjustments",
                    "Notes / derivation": "Not in sample RA; some payers include write-off info in RA or separate adjustment element. Type: RAComments (xs:string, minLength: 0, maxLength: 2000) for comments.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Not stored",
                    "Remittance DB Path": "Derived from claims.remittance_claim.comments or adjustment feed",
                    "Data Type": "numeric(14,2) / text",
                    "Best Path": "Derived from claims.remittance_claim.comments or external adjustment feed, per schema's RAComments.",
                    "AI Analysis": "Requires external adjustment data; schemas support comments for potential write-off details."
                },
                {
                    "Report Column": "XML File Name / XMLFileName / LastSubmissionFile / LastRemittanceFile",
                    "Submission XML path": "Submission filename (system metadata)",
                    "Remittance XML path": "RA filename / header metadata (transaction date + sender/receiver)",
                    "Notes / derivation": "File names from external metadata; Header fields assist. Types: HeaderTransactionDate (DateTimeForm), HeaderSenderID, HeaderReceiverID (xs:string).",
                    "Cursor Analysis": "",
                    "Submission DB Path": "claims.ingestion_file.file_id",
                    "Remittance DB Path": "claims.ingestion_file.file_id",
                    "Data Type": "text",
                    "Best Path": "claims.ingestion_file.file_id, as schema lacks file metadata.",
                    "AI Analysis": "External metadata; schemas provide header fields for context."
                },
                {
                    "Report Column": "RejectionPerc",
                    "Submission XML path": "Derived",
                    "Remittance XML path": "Derived",
                    "Notes / derivation": "(sum(Activity/Net - Activity/PaymentAmount) / sum(Activity/Net)) * 100. Types: ActivityNet, ActivityPaymentAmount (xs:float). Denominator is total billed amount.",
                    "Cursor Analysis": "",
                    "Submission DB Path": "Derived",
                    "Remittance DB Path": "(sum(claims.remittance_activity.net - payment_amount) / sum(net)) * 100 where net > 0",
                    "Data Type": "numeric",
                    "Best Path": "(sum(claims.remittance_activity.net - payment_amount) / sum(net)) * 100 from remittance_activity, per schema's ActivityNet and ActivityPaymentAmount.",
                    "AI Analysis": "Computed metric for rejection rate; uses remittance data. Schema supports float-based calculations."
                }
            ]
        }
    ]
}